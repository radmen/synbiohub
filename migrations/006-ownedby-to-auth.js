// Migration to add authorization table
const access = require('../lib/auth/access')
const config = require('../lib/config')
const db = require('../lib/db')
const generateGraph = require('../lib/generateGraph')
const sparql = require('../lib/sparql/sparql')
const loadTemplate = require('../lib/loadTemplate')
const OWNERSHIP = 3

module.exports = {
  up: async function (query, DataTypes) {
    let databasePrefix = config.get('databasePrefix')
    let users = await db.model.User.findAll({ where: { virtual: false } })
    let graphs = users.map(user => user.graphUri)
    let userByUris = {}
    users.forEach(user => {
      userByUris[databasePrefix + 'user/' + user.username] = user
    })

    // Also search the public graph
    graphs.push(null)

    let ownedByQuery = loadTemplate('sparql/GetAllOwnedBy.sparql', {})
    graphs.forEach(async function (graph) {
      console.log(`Querying ${graph}`)
      let ownerships = await sparql.queryJson(ownedByQuery, graph)

      ownerships
        .filter(ownership => ownership.topLevel.startsWith(databasePrefix))
        .filter(ownership => ownership.topLevel.startsWith(databasePrefix))
        .filter(ownership => ownership.ownedBy !== graph)
        .forEach(ownership => {
          let user = userByUris[ownership.ownedBy]
          if (!user) {
            return // User doesn't exist on this site (anymore?)
          }

          console.log(`Giving ${user.username} access to ${ownership.topLevel}`)

          generateGraph(ownership.topLevel, user)
            .then(generated => {
              let graph = { }
              graph[ownership.topLevel] = generated
              access.grant(user, graph, OWNERSHIP, 'Generated by auth migration')
            })
        })
    })
  },
  down: (query, DataTypes) => {
  }
}
